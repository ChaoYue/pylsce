#!/usr/bin/env python

import numpy as np
import mathex
from collections import OrderedDict

def get_season_length(data,threshold=0.8):
    """
    Calculate the fire season length.

    Arguments:
    ----------
    data: the input burned area data. Note the small values could not be masked
        but should be filled with zero.
    threshold: the threshold fraction used to calculate the fire season
        length. The fire season length is terminated when cumulative
        burned area fraction reaches this given threshold.

    Notes:
    ------
    2. No dimension check is applied, the first dimension of the input
        array will be used as the length dimension.
    """
    ba_month = data.copy() #no dimension check is done here
    ba_month.sort(axis=0)  #sort the data from small to big values
    ba_month_sort = ba_month[::-1,...]  #reverse the data to put big values
                                        #at the beginning

    #Get the fraction of burned area to total BA for each month
    ba_month_frac = ba_month_sort/ba_month_sort.sum(axis=0)
    ba_month_frac = ba_month_frac.cumsum(axis=0) #cumulative fraction

    #define the function to find the number of months where the
    #given threshold of BA fraction is reached
    def get_month(x):
        try:
            return np.nonzero(x>threshold)[0][0]+1
        except IndexError:
            return np.nan

    #apply the function over the whole array
    season_length_orc = np.apply_along_axis(get_month,0,ba_month_frac)
    #mask the bad values
    season_length_orc = np.ma.masked_invalid(season_length_orc)

    return season_length_orc

def peak_month_diff(model_peak,gfed_peak):
    """
    This is to compare peak month difference between two data.

    Notes:
    ------
    This code is originally generated by comparing GFED and model fire
        peak month. The variable names are not changed.
    """

    #Handle only 2-dim array
    if model_peak.ndim>2 or gfed_peak.ndim>2:
        raise ValueError("Can only handle 2-dim arrays")

    #define the function to calculate month difference
    def calc_degree_diff(a,b):
        if a >= b:
            if a - b >= 6:
                return 12 - (a-b)
            else:
                return a - b
        else:
            return calc_degree_diff(b,a)

    #apply the mutual mask to both data
    mask_merge = mathex.ndarray_mask_merge(model_peak,gfed_peak)
    if mask_merge is None:
        model_peak_common = model_peak
        gfed_peak_common = gfed_peak
    else:
        model_peak_common = np.ma.masked_array(model_peak,mask=mask_merge)
        gfed_peak_common = np.ma.masked_array(gfed_peak,mask=mask_merge)


    #Creat the peak month difference array and fill it
    peak_diff = model_peak_common.copy()
    for i in range(peak_diff.shape[0]):
        for j in range(peak_diff.shape[1]):
            if np.ma.isMA(peak_diff):
                if peak_diff.mask[i,j] == True:
                    pass
                else:
                    peak_diff[i,j] = calc_degree_diff(model_peak_common[i,j],gfed_peak_common[i,j])
            else:
                peak_diff[i,j] = calc_degree_diff(model_peak_common[i,j],gfed_peak_common[i,j])

    return peak_diff

    ## Below is the code to calculate the D2 value ##

    #  #The common_gfedba is the burned area by GFED3.1 limited to the area
    #  #where both GFED3.1 and model shows burning, and this is used to calculate
    #  #the area-weighted mean of the consine values between the peak fire month
    #  #angle of obs-model.
    #  common_gfedba = np.ma.masked_array(gfedba,mask=peak_diff.mask)

    #  #calculate the D2 value for the globe
    #  weighted_cos = np.ma.sum(np.cos(peak_diff*30/180.*pi)*common_gfedba)/np.ma.sum(common_gfedba)
    #  d2 = (1-weighted_cos)/2
    #  num_month_diff = np.arccos(weighted_cos)*180/pi/30  #first change into degrees, then change into months
    #  print "weighted cosine value is: ",weighted_cos
    #  print "the D2 value at globe is: ",d2
    #  print "The average number of months differ is: ", num_month_diff


